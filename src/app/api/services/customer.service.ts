/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiCustomerGetCustomerByIdGet$Json } from '../fn/customer/api-customer-get-customer-by-id-get-json';
import { ApiCustomerGetCustomerByIdGet$Json$Params } from '../fn/customer/api-customer-get-customer-by-id-get-json';
import { apiCustomerGetCustomerByIdGet$Plain } from '../fn/customer/api-customer-get-customer-by-id-get-plain';
import { ApiCustomerGetCustomerByIdGet$Plain$Params } from '../fn/customer/api-customer-get-customer-by-id-get-plain';
import { apiCustomerListCustomerGet$Json } from '../fn/customer/api-customer-list-customer-get-json';
import { ApiCustomerListCustomerGet$Json$Params } from '../fn/customer/api-customer-list-customer-get-json';
import { apiCustomerListCustomerGet$Plain } from '../fn/customer/api-customer-list-customer-get-plain';
import { ApiCustomerListCustomerGet$Plain$Params } from '../fn/customer/api-customer-list-customer-get-plain';
import { apiCustomerUpdateCustomerPut$Json } from '../fn/customer/api-customer-update-customer-put-json';
import { ApiCustomerUpdateCustomerPut$Json$Params } from '../fn/customer/api-customer-update-customer-put-json';
import { apiCustomerUpdateCustomerPut$Plain } from '../fn/customer/api-customer-update-customer-put-plain';
import { ApiCustomerUpdateCustomerPut$Plain$Params } from '../fn/customer/api-customer-update-customer-put-plain';
import { CustomerListResultCustomModel } from '../models/customer-list-result-custom-model';
import { CustomerResultCustomModel } from '../models/customer-result-custom-model';
import { UpdateCustomerResponseResultCustomModel } from '../models/update-customer-response-result-custom-model';

@Injectable({ providedIn: 'root' })
export class CustomerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiCustomerListCustomerGet()` */
  static readonly ApiCustomerListCustomerGetPath = '/api/Customer/ListCustomer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCustomerListCustomerGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomerListCustomerGet$Plain$Response(params?: ApiCustomerListCustomerGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CustomerListResultCustomModel>> {
    return apiCustomerListCustomerGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCustomerListCustomerGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomerListCustomerGet$Plain(params?: ApiCustomerListCustomerGet$Plain$Params, context?: HttpContext): Observable<CustomerListResultCustomModel> {
    return this.apiCustomerListCustomerGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CustomerListResultCustomModel>): CustomerListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCustomerListCustomerGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomerListCustomerGet$Json$Response(params?: ApiCustomerListCustomerGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CustomerListResultCustomModel>> {
    return apiCustomerListCustomerGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCustomerListCustomerGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomerListCustomerGet$Json(params?: ApiCustomerListCustomerGet$Json$Params, context?: HttpContext): Observable<CustomerListResultCustomModel> {
    return this.apiCustomerListCustomerGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CustomerListResultCustomModel>): CustomerListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiCustomerGetCustomerByIdGet()` */
  static readonly ApiCustomerGetCustomerByIdGetPath = '/api/Customer/GetCustomerById';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCustomerGetCustomerByIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomerGetCustomerByIdGet$Plain$Response(params?: ApiCustomerGetCustomerByIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CustomerResultCustomModel>> {
    return apiCustomerGetCustomerByIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCustomerGetCustomerByIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomerGetCustomerByIdGet$Plain(params?: ApiCustomerGetCustomerByIdGet$Plain$Params, context?: HttpContext): Observable<CustomerResultCustomModel> {
    return this.apiCustomerGetCustomerByIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CustomerResultCustomModel>): CustomerResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCustomerGetCustomerByIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomerGetCustomerByIdGet$Json$Response(params?: ApiCustomerGetCustomerByIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CustomerResultCustomModel>> {
    return apiCustomerGetCustomerByIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCustomerGetCustomerByIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomerGetCustomerByIdGet$Json(params?: ApiCustomerGetCustomerByIdGet$Json$Params, context?: HttpContext): Observable<CustomerResultCustomModel> {
    return this.apiCustomerGetCustomerByIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CustomerResultCustomModel>): CustomerResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiCustomerUpdateCustomerPut()` */
  static readonly ApiCustomerUpdateCustomerPutPath = '/api/Customer/UpdateCustomer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCustomerUpdateCustomerPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCustomerUpdateCustomerPut$Plain$Response(params?: ApiCustomerUpdateCustomerPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<UpdateCustomerResponseResultCustomModel>> {
    return apiCustomerUpdateCustomerPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCustomerUpdateCustomerPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCustomerUpdateCustomerPut$Plain(params?: ApiCustomerUpdateCustomerPut$Plain$Params, context?: HttpContext): Observable<UpdateCustomerResponseResultCustomModel> {
    return this.apiCustomerUpdateCustomerPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<UpdateCustomerResponseResultCustomModel>): UpdateCustomerResponseResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCustomerUpdateCustomerPut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCustomerUpdateCustomerPut$Json$Response(params?: ApiCustomerUpdateCustomerPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<UpdateCustomerResponseResultCustomModel>> {
    return apiCustomerUpdateCustomerPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCustomerUpdateCustomerPut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCustomerUpdateCustomerPut$Json(params?: ApiCustomerUpdateCustomerPut$Json$Params, context?: HttpContext): Observable<UpdateCustomerResponseResultCustomModel> {
    return this.apiCustomerUpdateCustomerPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<UpdateCustomerResponseResultCustomModel>): UpdateCustomerResponseResultCustomModel => r.body)
    );
  }

}
