/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiCategoryActivateCategoryPost$Json } from '../fn/category/api-category-activate-category-post-json';
import { ApiCategoryActivateCategoryPost$Json$Params } from '../fn/category/api-category-activate-category-post-json';
import { apiCategoryActivateCategoryPost$Plain } from '../fn/category/api-category-activate-category-post-plain';
import { ApiCategoryActivateCategoryPost$Plain$Params } from '../fn/category/api-category-activate-category-post-plain';
import { apiCategoryChangeActiveCategoryPost$Json } from '../fn/category/api-category-change-active-category-post-json';
import { ApiCategoryChangeActiveCategoryPost$Json$Params } from '../fn/category/api-category-change-active-category-post-json';
import { apiCategoryChangeActiveCategoryPost$Plain } from '../fn/category/api-category-change-active-category-post-plain';
import { ApiCategoryChangeActiveCategoryPost$Plain$Params } from '../fn/category/api-category-change-active-category-post-plain';
import { apiCategoryCreatePost$Json } from '../fn/category/api-category-create-post-json';
import { ApiCategoryCreatePost$Json$Params } from '../fn/category/api-category-create-post-json';
import { apiCategoryCreatePost$Plain } from '../fn/category/api-category-create-post-plain';
import { ApiCategoryCreatePost$Plain$Params } from '../fn/category/api-category-create-post-plain';
import { apiCategoryDeactivateCategoryPost$Json } from '../fn/category/api-category-deactivate-category-post-json';
import { ApiCategoryDeactivateCategoryPost$Json$Params } from '../fn/category/api-category-deactivate-category-post-json';
import { apiCategoryDeactivateCategoryPost$Plain } from '../fn/category/api-category-deactivate-category-post-plain';
import { ApiCategoryDeactivateCategoryPost$Plain$Params } from '../fn/category/api-category-deactivate-category-post-plain';
import { apiCategoryGetAllGet$Json } from '../fn/category/api-category-get-all-get-json';
import { ApiCategoryGetAllGet$Json$Params } from '../fn/category/api-category-get-all-get-json';
import { apiCategoryGetAllGet$Plain } from '../fn/category/api-category-get-all-get-plain';
import { ApiCategoryGetAllGet$Plain$Params } from '../fn/category/api-category-get-all-get-plain';
import { apiCategoryGetByIdCategoryIdGet$Json } from '../fn/category/api-category-get-by-id-category-id-get-json';
import { ApiCategoryGetByIdCategoryIdGet$Json$Params } from '../fn/category/api-category-get-by-id-category-id-get-json';
import { apiCategoryGetByIdCategoryIdGet$Plain } from '../fn/category/api-category-get-by-id-category-id-get-plain';
import { ApiCategoryGetByIdCategoryIdGet$Plain$Params } from '../fn/category/api-category-get-by-id-category-id-get-plain';
import { apiCategoryUpdatePut$Json } from '../fn/category/api-category-update-put-json';
import { ApiCategoryUpdatePut$Json$Params } from '../fn/category/api-category-update-put-json';
import { apiCategoryUpdatePut$Plain } from '../fn/category/api-category-update-put-plain';
import { ApiCategoryUpdatePut$Plain$Params } from '../fn/category/api-category-update-put-plain';
import { BooleanResultCustomModel } from '../models/boolean-result-custom-model';
import { CategoryListResultCustomModel } from '../models/category-list-result-custom-model';
import { CategoryResultCustomModel } from '../models/category-result-custom-model';
import { StringResultCustomModel } from '../models/string-result-custom-model';

@Injectable({ providedIn: 'root' })
export class CategoryService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiCategoryGetAllGet()` */
  static readonly ApiCategoryGetAllGetPath = '/api/Category/GetAll';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoryGetAllGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoryGetAllGet$Plain$Response(params?: ApiCategoryGetAllGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryListResultCustomModel>> {
    return apiCategoryGetAllGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoryGetAllGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoryGetAllGet$Plain(params?: ApiCategoryGetAllGet$Plain$Params, context?: HttpContext): Observable<CategoryListResultCustomModel> {
    return this.apiCategoryGetAllGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategoryListResultCustomModel>): CategoryListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoryGetAllGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoryGetAllGet$Json$Response(params?: ApiCategoryGetAllGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryListResultCustomModel>> {
    return apiCategoryGetAllGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoryGetAllGet$Json$Respo nse()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoryGetAllGet$Json(params?: ApiCategoryGetAllGet$Json$Params, context?: HttpContext): Observable<CategoryListResultCustomModel> {
    return this.apiCategoryGetAllGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategoryListResultCustomModel>): CategoryListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiCategoryGetByIdCategoryIdGet()` */
  static readonly ApiCategoryGetByIdCategoryIdGetPath = '/api/Category/GetById/{categoryId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoryGetByIdCategoryIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoryGetByIdCategoryIdGet$Plain$Response(params: ApiCategoryGetByIdCategoryIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryResultCustomModel>> {
    return apiCategoryGetByIdCategoryIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoryGetByIdCategoryIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoryGetByIdCategoryIdGet$Plain(params: ApiCategoryGetByIdCategoryIdGet$Plain$Params, context?: HttpContext): Observable<CategoryResultCustomModel> {
    return this.apiCategoryGetByIdCategoryIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategoryResultCustomModel>): CategoryResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoryGetByIdCategoryIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoryGetByIdCategoryIdGet$Json$Response(params: ApiCategoryGetByIdCategoryIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryResultCustomModel>> {
    return apiCategoryGetByIdCategoryIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoryGetByIdCategoryIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoryGetByIdCategoryIdGet$Json(params: ApiCategoryGetByIdCategoryIdGet$Json$Params, context?: HttpContext): Observable<CategoryResultCustomModel> {
    return this.apiCategoryGetByIdCategoryIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategoryResultCustomModel>): CategoryResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiCategoryDeactivateCategoryPost()` */
  static readonly ApiCategoryDeactivateCategoryPostPath = '/api/Category/DeactivateCategory';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoryDeactivateCategoryPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryDeactivateCategoryPost$Plain$Response(params?: ApiCategoryDeactivateCategoryPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<StringResultCustomModel>> {
    return apiCategoryDeactivateCategoryPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoryDeactivateCategoryPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryDeactivateCategoryPost$Plain(params?: ApiCategoryDeactivateCategoryPost$Plain$Params, context?: HttpContext): Observable<StringResultCustomModel> {
    return this.apiCategoryDeactivateCategoryPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<StringResultCustomModel>): StringResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoryDeactivateCategoryPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryDeactivateCategoryPost$Json$Response(params?: ApiCategoryDeactivateCategoryPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<StringResultCustomModel>> {
    return apiCategoryDeactivateCategoryPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoryDeactivateCategoryPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryDeactivateCategoryPost$Json(params?: ApiCategoryDeactivateCategoryPost$Json$Params, context?: HttpContext): Observable<StringResultCustomModel> {
    return this.apiCategoryDeactivateCategoryPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<StringResultCustomModel>): StringResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiCategoryActivateCategoryPost()` */
  static readonly ApiCategoryActivateCategoryPostPath = '/api/Category/ActivateCategory';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoryActivateCategoryPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryActivateCategoryPost$Plain$Response(params?: ApiCategoryActivateCategoryPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<StringResultCustomModel>> {
    return apiCategoryActivateCategoryPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoryActivateCategoryPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryActivateCategoryPost$Plain(params?: ApiCategoryActivateCategoryPost$Plain$Params, context?: HttpContext): Observable<StringResultCustomModel> {
    return this.apiCategoryActivateCategoryPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<StringResultCustomModel>): StringResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoryActivateCategoryPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryActivateCategoryPost$Json$Response(params?: ApiCategoryActivateCategoryPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<StringResultCustomModel>> {
    return apiCategoryActivateCategoryPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoryActivateCategoryPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryActivateCategoryPost$Json(params?: ApiCategoryActivateCategoryPost$Json$Params, context?: HttpContext): Observable<StringResultCustomModel> {
    return this.apiCategoryActivateCategoryPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<StringResultCustomModel>): StringResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiCategoryChangeActiveCategoryPost()` */
  static readonly ApiCategoryChangeActiveCategoryPostPath = '/api/Category/ChangeActiveCategory';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoryChangeActiveCategoryPost$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoryChangeActiveCategoryPost$Plain$Response(params?: ApiCategoryChangeActiveCategoryPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanResultCustomModel>> {
    return apiCategoryChangeActiveCategoryPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoryChangeActiveCategoryPost$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoryChangeActiveCategoryPost$Plain(params?: ApiCategoryChangeActiveCategoryPost$Plain$Params, context?: HttpContext): Observable<BooleanResultCustomModel> {
    return this.apiCategoryChangeActiveCategoryPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanResultCustomModel>): BooleanResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoryChangeActiveCategoryPost$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoryChangeActiveCategoryPost$Json$Response(params?: ApiCategoryChangeActiveCategoryPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanResultCustomModel>> {
    return apiCategoryChangeActiveCategoryPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoryChangeActiveCategoryPost$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoryChangeActiveCategoryPost$Json(params?: ApiCategoryChangeActiveCategoryPost$Json$Params, context?: HttpContext): Observable<BooleanResultCustomModel> {
    return this.apiCategoryChangeActiveCategoryPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanResultCustomModel>): BooleanResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiCategoryUpdatePut()` */
  static readonly ApiCategoryUpdatePutPath = '/api/Category/Update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoryUpdatePut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryUpdatePut$Plain$Response(params?: ApiCategoryUpdatePut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanResultCustomModel>> {
    return apiCategoryUpdatePut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoryUpdatePut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryUpdatePut$Plain(params?: ApiCategoryUpdatePut$Plain$Params, context?: HttpContext): Observable<BooleanResultCustomModel> {
    return this.apiCategoryUpdatePut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanResultCustomModel>): BooleanResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoryUpdatePut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryUpdatePut$Json$Response(params?: ApiCategoryUpdatePut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanResultCustomModel>> {
    return apiCategoryUpdatePut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoryUpdatePut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryUpdatePut$Json(params?: ApiCategoryUpdatePut$Json$Params, context?: HttpContext): Observable<BooleanResultCustomModel> {
    return this.apiCategoryUpdatePut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanResultCustomModel>): BooleanResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiCategoryCreatePost()` */
  static readonly ApiCategoryCreatePostPath = '/api/Category/Create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoryCreatePost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryCreatePost$Plain$Response(params?: ApiCategoryCreatePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanResultCustomModel>> {
    return apiCategoryCreatePost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoryCreatePost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryCreatePost$Plain(params?: ApiCategoryCreatePost$Plain$Params, context?: HttpContext): Observable<BooleanResultCustomModel> {
    return this.apiCategoryCreatePost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanResultCustomModel>): BooleanResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoryCreatePost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryCreatePost$Json$Response(params?: ApiCategoryCreatePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanResultCustomModel>> {
    return apiCategoryCreatePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoryCreatePost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCategoryCreatePost$Json(params?: ApiCategoryCreatePost$Json$Params, context?: HttpContext): Observable<BooleanResultCustomModel> {
    return this.apiCategoryCreatePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanResultCustomModel>): BooleanResultCustomModel => r.body)
    );
  }

}
